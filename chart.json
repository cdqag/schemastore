{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://json.schemastore.org/chart.json",
  "additionalProperties": false,
  "properties": {
    "apiVersion": {
      "description": "The apiVersion field should be v2 for Helm charts that require at least Helm 3. Charts supporting previous Helm versions have an apiVersion set to v1 and are still installable by Helm 3.",
      "enum": ["v1", "v2"]
    },
    "name": {
      "description": "The name of the chart",
      "type": "string"
    },
    "version": {
      "description": "A SemVer 2 version",
      "type": "string"
    },
    "kubeVersion": {
      "description": "The optional kubeVersion field can define semver constraints on supported Kubernetes versions. Helm will validate the version constraints when installing the chart and fail if the cluster runs an unsupported Kubernetes version.",
      "type": "string"
    },
    "description": {
      "description": "A single-sentence description of this project",
      "type": "string"
    },
    "type": {
      "description": "The type of the chart",
      "default": "application",
      "enum": ["application", "library"]
    },
    "keywords": {
      "type": "array",
      "description": "A list of keywords about this project",
      "items": {
        "type": "string"
      }
    },
    "home": {
      "description": "The URL of this projects home page",
      "type": "string",
      "format": "uri"
    },
    "sources": {
      "type": "array",
      "description": "A list of URLs to source code for this project",
      "items": {
        "type": "string",
        "format": "uri"
      }
    },
    "dependencies": {
      "type": "array",
      "description": "In Helm, one chart may depend on any number of other charts. These dependencies can be dynamically linked using the dependencies field in Chart.yaml or brought in to the charts/ directory and managed manually.\nThe charts required by the current chart are defined as a list in the dependencies field.",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name"],
        "properties": {
          "name": {
            "description": "The name of the chart",
            "type": "string"
          },
          "version": {
            "description": "The version of the chart",
            "type": "string"
          },
          "repository": {
            "description": "The repository URL or alias",
            "anyOf": [
              {
                "type": "string",
                "format": "uri"
              },
              {
                "type": "string",
                "pattern": "^@"
              }
            ]
          },
          "condition": {
            "description": "A yaml path that resolves to a boolean, used for enabling/disabling charts",
            "type": "string"
          },
          "tags": {
            "description": "Tags can be used to group charts for enabling/disabling together",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "import-values": {
            "description": "ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["parent", "child"],
                  "properties": {
                    "parent": {
                      "description": "The destination path in the parent chart's values",
                      "type": "string"
                    },
                    "child": {
                      "description": "The source key of the values to be imported",
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "alias": {
            "description": "Alias to be used for the chart. Useful when you have to add the same chart multiple times",
            "type": "string"
          }
        }
      }
    },
    "maintainers": {
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name"],
        "properties": {
          "name": {
            "description": "The maintainers name",
            "type": "string"
          },
          "email": {
            "description": "The maintainers email",
            "type": "string",
            "format": "email"
          },
          "url": {
            "description": "A URL for the maintainer",
            "type": "string",
            "format": "uri"
          }
        }
      }
    },
    "icon": {
      "description": "A URL to an SVG or PNG image to be used as an icon",
      "type": "string",
      "format": "uri"
    },
    "appVersion": {
      "description": "Note that the appVersion field is not related to the version field. It is a way of specifying the version of the application. For example, the drupal chart may have an appVersion: \"8.2.1\", indicating that the version of Drupal included in the chart (by default) is 8.2.1. This field is informational, and has no impact on chart version calculations. Wrapping the version in quotes is highly recommended. It forces the YAML parser to treat the version number as a string. Leaving it unquoted can lead to parsing issues in some cases. For example, YAML interprets 1.0 as a floating point value, and a git commit SHA like 1234e10 as scientific notation.",
      "type": "string"
    },
    "deprecated": {
      "description": "When managing charts in a Chart Repository, it is sometimes necessary to deprecate a chart. The optional deprecated field in Chart.yaml can be used to mark a chart as deprecated. If the latest version of a chart in the repository is marked as deprecated, then the chart as a whole is considered to be deprecated. The chart name can be later reused by publishing a newer version that is not marked as deprecated.",
      "type": "boolean"
    },
    "annotations": {
      "description": "A list of annotations keyed by name",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "properties": {
        "cdq.com/argocd.app.name": {
          "description": "This is the name of the ArgoCD application that will be created for this chart. If not provided, the name of the chart will be used.",
          "type": "string"
        },
        "cdq.com/argocd.app.imageTagPath": {
          "description": "What is the path of image tag that should be updated.",
          "type": "string",
          "default": "baseChart.image.tag"
        },
        "cdq.com/argocd.app.syncTimeout": {
          "description": "Sync command timeout",
          "type": "string",
          "default": "900"
        },
        "cdq.com/argocd.app.waitTimeout": {
          "description": "Wait command timeout",
          "type": "string",
          "default": "300"
        },
        "cdq.com/argocd.app.syncRetryLimit": {
          "description": "Sync command retry limit",
          "type": "string",
          "default": "2"
        }
      }
    }
  },
  "required": ["apiVersion", "name", "version"],
  "title": "Helm Chart.yaml",
  "type": "object"
}
